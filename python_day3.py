# -*- coding: utf-8 -*-
"""Python-day3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gggMKdAYqN9zbha3mdHx-vKDxZkArJIX
"""

#while loop for 5 time
# for i  in range(10):
#   print(i)
ctr=0
while ctr<10:
  print(ctr)
  ctr = ctr+1

sum=0
for i in range (1,11):
  sum=sum+i
  # print(i)
  print("Final Result is=",sum)

"""sum=0
i=1
while i<10:
  sum=sum+i
  i=1
  print("Final Result is=",sum)
"""

sum=0
i=1
while i<11:
  sum=sum+i
  print(sum)
  i=i+1

#User Define Function
#Function is a block of statement that perform a specific task
#function help make our code reusable and modular.

#in build function from python
#print()
#type()
#list()
#remove()

#function Defibation
def sq(x):
  print(x*x)
sq(2) #method call

sq(2) #method call / function call

def sq(a):
  return a*a #return is the keyword
sq(4)

#without parameter
def add():
  a,b=3,4
  c=a+b
  return c

add() #call function

#simple intrest using parameter
def si(p,t,r):
  si=p*t*r/100
  return si
si(5000,2,5)

#simple intrest without return
def si(p,t,r):
  si=p*t*r/100
  print(si)
  return"si"
si(5000,2,5)

# write UDF find cube of number
def cube(x):
  print(x*x)
cube(4)

#write a function calc_grade(marks)
def calc_grade(marks):
  if marks>=80:
      grade="Distinction"
  elif marks>=60:
      grade="First class"
  elif marks>=40:
      grade="Pass"
  else:
      grade="Fail"
  return grade

calc_grade(45)

calc_grade(35)

calc_grade(75)

calc_grade(95)

calc_grade(int(input("enter the marks")))

#list
listnew=["Mango","Banana","Apple","Pineapple","Custard Apple","Strawberry"]
listnew

#Display fruits by changing case of all fruits to upper

for fruits in listnew:
  print(fruits.upper(),end=" ")

for fruit in listnew:
  #print(fruits.upper(),end=" ")
  print(fruit.replace("u","a"),end="")

for fruits in listnew:
  print(fruits.lower(),end=" ")

listnew=["Mango","Banana","Apple","Pineapple","Custard Apple","Strawberry"]
listnew

#indexing
listnew[2]

listnew[5]

listnew.count("Banana")

listnew=["Mango","Banana","Apple","Pineapple","Custard Apple","Strawberry"]
listnew
#Slicing
listnew[2:4:1]

listnew[1:5:1]

listnew[0:6:1]

listnew[1:6:3]

listnew[:5:]

listnew[:5]

listnew[-4::-1] #[start,stop,step]

listnew=["Mango","Banana","Apple","Pineapple","Custard Apple","Strawberry"]
listnew

listnew[-1]

listnew[-2]

listnew[-3]

listnew[-4]

print(listnew)
listnew[-4::-1]

listnew[-10::-1]

ls=[1:31]# creat a list of 1 to 30

listnew[::]

ls=list(range(1,31))
print(ls,end="")

ls[::4]

#print nos from index 2

listnew.append("Mulberry")
listnew

listnew.remove("Mulberry")
listnew

listnew

#display fruits which containsubstring as "pple" using for loop
#display fruits which containsubstring as "berry" using for loop
for fruit in listnew:
  if 'pple' in fruit:
    print(fruit)

#creat list4 of fruits from listnew having only 'berry' as substring and
#store remaining fruits in list 5

list4=[]
list5=[]
for fruit in listnew:
  if 'berry' in fruit:
    list4.append(fruit)
  else:
    list5.append(fruit)
print(list4,end="")
print(list5,end="")

#print square of all numbers of list1 to list2
l1=[2,3,4,5,6]
l2=[]
for i in l1:
  l2.append(i**2)
print(l1)
print(l2)

#List comprehension-markes code compact
l1=[2,3,4,5,6]
l2=[i**2 for i in l1]
print(l1)
print(l2)

#extract fruit names containing sub string 'berry' using list compre.
listnew

newlist=[fruit for fruit in listnew if 'berry' in fruit]

newlist

city=["Pune","Mumbai","Jaipur","Varanasi","Indore"]
newlistpur=[i for i in city if 'pur' not in i]

newlistpur

listnew=["Mango","Banana","Apple","Pineapple","Custard Apple","Strawberry"]
listnew.index('Banana')

listnew.index('Orange')

listnew[2]="Orange"

listnew #insted of apple its display Orange

#Data Structure- 2. Tuple
#TUples are not mutable i.e. immutable
#created using round brackets

t1=(10,20,30,40,50)
t1

type(t1)

a=10
type(a)

a=10,20
type(a)

a={'a':10,'b':20}
type(a)

t1=(10,20,30,40,50)
t1

#indexing
t1[3]

t1[0]=100

t3=t1+(6,7,8,9,10)
t3

t1*2

dir(t1)

t1.count(30)

t1=(10,20,30,40, 30,50,10)
t1

t1.count(30)

t1

t1.index(30)

#tuple slicing
t1[1:5:1]

t1[-2:-5:-1]

t1

t1[::-1] #reverise list

t1[3:]

#Data Structure 3:=Dictionary
#Dict are used to store data values in "key : value pairs"
#Dict is a collection which is ordered changeable do not allowed duplicates
#Dict are written with curly brackets and have key and value
#Keys are unique identifiers that are associated with each value

capital_dict={'Nepal' :"Kathmandu","Italy":"Rome"}
type(capital_dict)

capital_dict

Student={1:"Naman",2:"Ravi",3:"Rajat"}
Student

lists=(Student.keys())
lists

dir(dict)

Student

Student[1]

capital_dict["Nepal"]

capital_dict["Italy"]

val=Student.values()
val

itm=Student.items()
itm

#The update(), method updates the dict with ele from
#another dict obj or from an iterable pf ke value pair

Student_new={4:"Nosha",5:"harsh"}
Student.update(Student_new)

Student

Student.update({6:"Priya",7:"Raja"})

Student

#POP Function to remove the elements

Student

Student.pop(7)

Student

Student[6]="Abhilash" #replace the element

Student

Student.popitem() #remove last key:vale pair from dict

Student

